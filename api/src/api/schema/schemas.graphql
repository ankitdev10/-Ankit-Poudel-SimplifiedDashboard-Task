type Mutation {
  createUser(input: CreateUserInput!): CreateUserResult!
  deleteUser(id: ID!): DeletionResponse!
  updateUser(id: ID!, input: UpdateUserInput!): User!
  login(username: String!, password: String!): LoginResult!
  createProject(input: CreateProjectInput!): Project!
  updateProject(id: ID!, input: UpdateProjectInput!): Project!
  deleteProject(id: ID!): DeletionResponse!
}

type Query {
  me: User
  users: UserList!
  projects(options: ProjectListOptions): ProjectList!
  project(id: ID!): Project!
  metrics: [MetricData]!
}

input CreateUserInput {
  firstName: String!
  lastName: String!
  email: String!
  phone: String!
  password: String!
}

input UpdateUserInput {
  firstName: String
  lastName: String
  email: String
  phone: String
  password: String
}

input CreateProjectInput {
  name: String!
  description: String!
  category: String!
  price: Int!
  managerId: ID!
  status: ProjectStatus!
}

input UpdateProjectInput {
  id: ID!
  name: String
  description: String
  status: ProjectStatus
  price: Int
  progress: Int
  managerId: ID
}

input ProjectListOptions {
  pagination: PaginationOptions
  status: ProjectStatus
}

input PaginationOptions {
  page: Int
  limit: Int
}

type UserList implements PaginatedList {
  items: [User!]!
  totalItems: Int!
}

type ProjectList implements PaginatedList {
  items: [Project!]!
  totalItems: Int!
}

type MetricData {
  type: String!
  value: String!
}

union CreateUserResult = User | UserAlreadyExistsError
union LoginResult = User | InvalidCredentialsError
